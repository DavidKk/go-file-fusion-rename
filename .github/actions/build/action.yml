name: "Build Go GUI App"
description: "Build Go GUI application for multiple platforms"

inputs:
  go-version:
    description: "Go version to use"
    required: false
    default: "1.24"

outputs:
  artifacts:
    description: "List of built artifacts"
    value: ${{ steps.artifacts.outputs.list }}

runs:
  using: "composite"
  steps:
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}

    - name: Install GUI dependencies (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libdbusmenu-glib-dev \
          libayatana-appindicator3-dev \
          libayatana-indicator3-dev

    - name: Build Linux Binary
      if: runner.os == 'Linux'
      shell: bash
      run: |
        export CGO_ENABLED=1
        go build -ldflags="-s -w" -o file-fusion-rename-linux main.go

        # Create ZIP archive
        echo "Creating ZIP archive for Linux binary..."
        zip file-fusion-rename-linux.zip file-fusion-rename-linux

        # Verify ZIP file
        if [ -f "file-fusion-rename-linux.zip" ]; then
          echo "Linux ZIP file created successfully"
          echo "ZIP file size: $(ls -lh file-fusion-rename-linux.zip | awk '{print $5}')"
        else
          echo "Error: Linux ZIP file creation failed"
          exit 1
        fi

    - name: Build Windows Binary
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        set CGO_ENABLED=1
        go build -ldflags="-s -w" -o file-fusion-rename-windows.exe main.go

        REM Create ZIP archive
        echo Creating ZIP archive for Windows binary...
        powershell -Command "Compress-Archive -Path 'file-fusion-rename-windows.exe' -DestinationPath 'file-fusion-rename-windows.zip'"

        REM Verify ZIP file
        if exist "file-fusion-rename-windows.zip" (
          echo Windows ZIP file created successfully
          dir file-fusion-rename-windows.zip
        ) else (
          echo Error: Windows ZIP file creation failed
          exit /b 1
        )

    - name: Build macOS Binary (Intel)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        export CGO_ENABLED=1
        export GOARCH=amd64
        export MACOSX_DEPLOYMENT_TARGET=11.0
        go build -ldflags="-s -w -X main.version=1.0.0" -tags="osusergo netgo" -o file-fusion-rename-macos-intel main.go
        codesign --force --deep --sign - file-fusion-rename-macos-intel

        # Create ZIP archive
        echo "Creating ZIP archive for macOS Intel binary..."
        zip file-fusion-rename-macos-intel.zip file-fusion-rename-macos-intel

        # Verify ZIP file
        if [ -f "file-fusion-rename-macos-intel.zip" ]; then
          echo "macOS Intel ZIP file created successfully"
          echo "ZIP file size: $(ls -lh file-fusion-rename-macos-intel.zip | awk '{print $5}')"
        else
          echo "Error: macOS Intel ZIP file creation failed"
          exit 1
        fi

    - name: Build macOS Binary (ARM64)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        export CGO_ENABLED=1
        export GOARCH=arm64
        export MACOSX_DEPLOYMENT_TARGET=11.0
        go build -ldflags="-s -w -X main.version=1.0.0" -tags="osusergo netgo" -o file-fusion-rename-macos-arm64 main.go
        codesign --force --deep --sign - file-fusion-rename-macos-arm64

        # Create ZIP archive
        echo "Creating ZIP archive for macOS ARM64 binary..."
        zip file-fusion-rename-macos-arm64.zip file-fusion-rename-macos-arm64

        # Verify ZIP file
        if [ -f "file-fusion-rename-macos-arm64.zip" ]; then
          echo "macOS ARM64 ZIP file created successfully"
          echo "ZIP file size: $(ls -lh file-fusion-rename-macos-arm64.zip | awk '{print $5}')"
        else
          echo "Error: macOS ARM64 ZIP file creation failed"
          exit 1
        fi

    - name: Package macOS App Bundle
      if: runner.os == 'macOS'
      shell: bash
      run: |
        set -e
        echo "Building macOS app bundle..."

        # Verify both binaries exist
        if [ ! -f "file-fusion-rename-macos-intel" ] || [ ! -f "file-fusion-rename-macos-arm64" ]; then
          echo "Error: Both Intel and ARM64 binaries are required"
          exit 1
        fi

        echo "Intel binary size: $(ls -lh file-fusion-rename-macos-intel | awk '{print $5}')"
        echo "ARM64 binary size: $(ls -lh file-fusion-rename-macos-arm64 | awk '{print $5}')"

        # Create universal binary using lipo
        echo "Creating universal binary..."
        lipo -create -output "file-fusion-rename-universal" \
          "file-fusion-rename-macos-intel" \
          "file-fusion-rename-macos-arm64"

        # Verify universal binary
        echo "Universal binary architectures:"
        lipo -info "file-fusion-rename-universal"

        # Create app bundle structure
        echo "Creating app bundle structure..."
        mkdir -p "File Fusion Rename.app/Contents/MacOS"
        mkdir -p "File Fusion Rename.app/Contents/Resources"

        # Copy universal binary to app bundle
        echo "Copying universal binary to app bundle..."
        cp file-fusion-rename-universal "File Fusion Rename.app/Contents/MacOS/File Fusion Rename"
        chmod +x "File Fusion Rename.app/Contents/MacOS/File Fusion Rename"

        # Create improved Info.plist with better macOS compatibility
        echo "Creating Info.plist..."
        cat > "File Fusion Rename.app/Contents/Info.plist" <<'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>CFBundleExecutable</key>
          <string>File Fusion Rename</string>
          <key>CFBundleIdentifier</key>
          <string>com.davidkk.file-fusion-rename</string>
          <key>CFBundleName</key>
          <string>File Fusion Rename</string>
          <key>CFBundleDisplayName</key>
          <string>File Fusion Rename</string>
          <key>CFBundleVersion</key>
          <string>1.0.0</string>
          <key>CFBundleShortVersionString</key>
          <string>1.0.0</string>
          <key>CFBundlePackageType</key>
          <string>APPL</string>
          <key>CFBundleInfoDictionaryVersion</key>
          <string>6.0</string>
          <key>LSMinimumSystemVersion</key>
          <string>11.0</string>
          <key>LSApplicationCategoryType</key>
          <string>public.app-category.utilities</string>
          <key>NSPrincipalClass</key>
          <string>NSApplication</string>
          <key>NSHighResolutionCapable</key>
          <true/>
          <key>LSUIElement</key>
          <false/>
          <key>NSSupportsAutomaticGraphicsSwitching</key>
          <true/>
          <key>CFBundleSupportedPlatforms</key>
          <array>
            <string>MacOSX</string>
          </array>
          <key>DTSDKName</key>
          <string>macosx</string>
          <key>NSAppTransportSecurity</key>
          <dict>
            <key>NSAllowsArbitraryLoads</key>
            <false/>
          </dict>
          <key>NSRequiresAquaSystemAppearance</key>
          <false/>
        </dict>
        </plist>
        EOF

        # Verify app bundle structure
        echo "Verifying app bundle structure..."
        ls -la "File Fusion Rename.app/Contents/"
        ls -la "File Fusion Rename.app/Contents/MacOS/"

        # Verify universal binary in app bundle
        echo "Verifying universal binary in app bundle:"
        lipo -info "File Fusion Rename.app/Contents/MacOS/File Fusion Rename"
        file "File Fusion Rename.app/Contents/MacOS/File Fusion Rename"

        # Set proper permissions
        echo "Setting proper permissions..."
        chmod 755 "File Fusion Rename.app/Contents/MacOS/File Fusion Rename"
        find "File Fusion Rename.app" -type d -exec chmod 755 {} \;
        find "File Fusion Rename.app" -type f -exec chmod 644 {} \;
        chmod 755 "File Fusion Rename.app/Contents/MacOS/File Fusion Rename"

        # Sign the executable first
        echo "Signing executable..."
        codesign --force --options runtime --sign - "File Fusion Rename.app/Contents/MacOS/File Fusion Rename" || echo "Executable signing failed, continuing..."

        # Sign the app bundle
        echo "Signing app bundle..."
        codesign --force --deep --options runtime --sign - "File Fusion Rename.app" || echo "App bundle signing failed, continuing..."

        # Verify code signature
        echo "Verifying code signature..."
        codesign --verify --deep --strict "File Fusion Rename.app" && echo "Code signature verified" || echo "Code signature verification failed"

        # Create ZIP archive of the app bundle
        echo "Creating ZIP archive..."
        zip -r "File-Fusion-Rename-macOS-App.zip" "File Fusion Rename.app"

        # Verify ZIP file
        if [ -f "File-Fusion-Rename-macOS-App.zip" ]; then
          echo "ZIP file created successfully"
          echo "ZIP file size: $(ls -lh File-Fusion-Rename-macOS-App.zip | awk '{print $5}')"
        else
          echo "Error: ZIP file creation failed"
          exit 1
        fi

        echo "macOS app bundle created successfully!"
        echo "Final verification - app bundle exists: $([ -d 'File Fusion Rename.app' ] && echo 'YES' || echo 'NO')"
        echo "Final verification - ZIP file exists: $([ -f 'File-Fusion-Rename-macOS-App.zip' ] && echo 'YES' || echo 'NO')"

    - name: Upload Linux Artifact
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: file-fusion-rename-linux
        path: file-fusion-rename-linux.zip

    - name: Upload Windows Artifact
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: file-fusion-rename-windows
        path: file-fusion-rename-windows.zip

    - name: Upload macOS Intel Artifact
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: file-fusion-rename-macos-intel
        path: file-fusion-rename-macos-intel.zip

    - name: Upload macOS ARM64 Artifact
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: file-fusion-rename-macos-arm64
        path: file-fusion-rename-macos-arm64.zip

    - name: Upload macOS App Bundle
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: File-Fusion-Rename-macOS-App
        path: File-Fusion-Rename-macOS-App.zip

    - name: Verify macOS ZIP Files Upload
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "Verifying all macOS ZIP files before upload..."

        # Check Intel ZIP
        if [ -f "file-fusion-rename-macos-intel.zip" ]; then
          echo "✅ macOS Intel ZIP file exists"
          echo "Intel ZIP size: $(ls -lh file-fusion-rename-macos-intel.zip | awk '{print $5}')"
        else
          echo "❌ macOS Intel ZIP file not found!"
          exit 1
        fi

        # Check ARM64 ZIP
        if [ -f "file-fusion-rename-macos-arm64.zip" ]; then
          echo "✅ macOS ARM64 ZIP file exists"
          echo "ARM64 ZIP size: $(ls -lh file-fusion-rename-macos-arm64.zip | awk '{print $5}')"
        else
          echo "❌ macOS ARM64 ZIP file not found!"
          exit 1
        fi

        # Check App Bundle ZIP
        if [ -f "File-Fusion-Rename-macOS-App.zip" ]; then
          echo "✅ App bundle ZIP file exists"
          echo "App bundle ZIP size: $(ls -lh File-Fusion-Rename-macOS-App.zip | awk '{print $5}')"
        else
          echo "❌ App bundle ZIP file not found!"
          exit 1
        fi

    - name: Set artifacts output
      id: artifacts
      shell: bash
      run: |
        if [ "$RUNNER_OS" = "Linux" ]; then
          echo "list=file-fusion-rename-linux.zip" >> $GITHUB_OUTPUT
        elif [ "$RUNNER_OS" = "Windows" ]; then
          echo "list=file-fusion-rename-windows.zip" >> $GITHUB_OUTPUT
        elif [ "$RUNNER_OS" = "macOS" ]; then
          echo "list=file-fusion-rename-macos-intel.zip,file-fusion-rename-macos-arm64.zip,File-Fusion-Rename-macOS-App.zip" >> $GITHUB_OUTPUT
        fi
